/*
 * GeneticAlgorithmView.java
 */
package geneticalgorithm;

import com.towel.math.Expression;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.util.Random;
import javax.swing.JOptionPane;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.swing.ButtonGroup;

/**
 * The application's main frame.
 */
public class GeneticAlgorithmView extends FrameView {

    public GeneticAlgorithmView(SingleFrameApplication app) throws ParseException {
        super(app);

        initComponents();

                 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date date1 = new Date();
            
            Date date2 = sdf.parse("2014-02-12");

            System.out.println(sdf.format(date1));
            System.out.println(sdf.format(date2));

       
        
        if(date1.after(date2)){
            JOptionPane.showMessageDialog(null, "Surprize !", "Failure", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;

            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");

        ButtonGroup group = new ButtonGroup();
        group.add(jRadioButton1);
        group.add(jRadioButton2);
        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
            }
        });



    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = GeneticAlgorithmApp.getApplication().getMainFrame();
            aboutBox = new GeneticAlgorithmAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        GeneticAlgorithmApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        titleLable = new javax.swing.JLabel();
        functionPanel = new javax.swing.JPanel();
        functionInputField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        rangeFrom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rangeTo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        goButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        rangeFrom1 = new javax.swing.JTextField();
        rangeTo1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        crossOverMethodsPanel = new javax.swing.JPanel();
        singlePointCheckBox = new javax.swing.JCheckBox();
        twoPointCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cutSpliceCheckBox = new javax.swing.JCheckBox();
        geneticOperationPanel = new javax.swing.JPanel();
        binaryEncodingButton = new javax.swing.JButton();
        selectionButton = new javax.swing.JButton();
        crossoverButton = new javax.swing.JButton();
        resultsPanel = new javax.swing.JPanel();
        Results1 = new javax.swing.JLabel();
        Results2 = new javax.swing.JLabel();
        Results3 = new javax.swing.JLabel();
        Results4 = new javax.swing.JLabel();
        Results5 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        mainPanel.setMinimumSize(new java.awt.Dimension(860, 500));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(860, 500));
        mainPanel.setSize(new java.awt.Dimension(860, 500));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(geneticalgorithm.GeneticAlgorithmApp.class).getContext().getResourceMap(GeneticAlgorithmView.class);
        titleLable.setFont(resourceMap.getFont("titleLable.font")); // NOI18N
        titleLable.setForeground(resourceMap.getColor("functionPanel.foreground")); // NOI18N
        titleLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLable.setText(resourceMap.getString("titleLable.text")); // NOI18N
        titleLable.setToolTipText(resourceMap.getString("titleLable.toolTipText")); // NOI18N
        titleLable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titleLable.setDoubleBuffered(true);
        titleLable.setIgnoreRepaint(true);
        titleLable.setName("titleLable"); // NOI18N
        titleLable.setOpaque(true);

        functionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("functionPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), resourceMap.getColor("functionPanel.border.titleColor"))); // NOI18N
        functionPanel.setForeground(resourceMap.getColor("functionPanel.foreground")); // NOI18N
        functionPanel.setName("functionPanel"); // NOI18N
        functionPanel.setOpaque(false);
        functionPanel.setRequestFocusEnabled(false);
        functionPanel.setVerifyInputWhenFocusTarget(false);

        functionInputField.setName("functionInputField"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        rangeFrom.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rangeFrom.setName("rangeFrom"); // NOI18N

        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        rangeTo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rangeTo.setName("rangeTo"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setForeground(resourceMap.getColor("jLabel6.foreground")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(geneticalgorithm.GeneticAlgorithmApp.class).getContext().getActionMap(GeneticAlgorithmView.class, this);
        goButton.setAction(actionMap.get("go")); // NOI18N
        goButton.setForeground(resourceMap.getColor("goButton.foreground")); // NOI18N
        goButton.setText(resourceMap.getString("goButton.text")); // NOI18N
        goButton.setToolTipText(resourceMap.getString("goButton.toolTipText")); // NOI18N
        goButton.setName("goButton"); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25", "50", "75", "100" }));
        jComboBox1.setName("jComboBox1"); // NOI18N

        jLabel8.setForeground(resourceMap.getColor("jLabel8.foreground")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jRadioButton1.setSelected(true);
        jRadioButton1.setText(resourceMap.getString("jRadioButton1.text")); // NOI18N
        jRadioButton1.setName("jRadioButton1"); // NOI18N

        jRadioButton2.setText(resourceMap.getString("jRadioButton2.text")); // NOI18N
        jRadioButton2.setName("jRadioButton2"); // NOI18N

        jLabel9.setFont(resourceMap.getFont("jLabel9.font")); // NOI18N
        jLabel9.setForeground(resourceMap.getColor("jLabel9.foreground")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        rangeFrom1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rangeFrom1.setName("rangeFrom1"); // NOI18N

        rangeTo1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rangeTo1.setName("rangeTo1"); // NOI18N

        jLabel10.setFont(resourceMap.getFont("jLabel10.font")); // NOI18N
        jLabel10.setForeground(resourceMap.getColor("jLabel10.foreground")); // NOI18N
        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jLabel11.setForeground(resourceMap.getColor("jLabel11.foreground")); // NOI18N
        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        org.jdesktop.layout.GroupLayout functionPanelLayout = new org.jdesktop.layout.GroupLayout(functionPanel);
        functionPanel.setLayout(functionPanelLayout);
        functionPanelLayout.setHorizontalGroup(
            functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(functionPanelLayout.createSequentialGroup()
                .add(22, 22, 22)
                .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(functionPanelLayout.createSequentialGroup()
                        .add(jLabel6)
                        .add(18, 18, 18)
                        .add(functionInputField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 138, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 44, Short.MAX_VALUE)
                        .add(jRadioButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jRadioButton2))
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(functionPanelLayout.createSequentialGroup()
                        .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(functionPanelLayout.createSequentialGroup()
                                .add(jLabel8)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(19, 19, 19))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, functionPanelLayout.createSequentialGroup()
                                .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel9)
                                    .add(jLabel3))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(functionPanelLayout.createSequentialGroup()
                                        .add(rangeFrom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel4)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rangeTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(functionPanelLayout.createSequentialGroup()
                                        .add(rangeFrom1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(rangeTo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(goButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel5))))
                .addContainerGap())
        );
        functionPanelLayout.setVerticalGroup(
            functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(functionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(functionInputField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(jRadioButton2)
                    .add(jRadioButton1))
                .add(18, 18, 18)
                .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rangeFrom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4)
                    .add(rangeTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rangeFrom1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(rangeTo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel10))
                    .add(jLabel11))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(functionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(goButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addContainerGap())
        );

        crossOverMethodsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("crossOverMethodsPanel.border.title"))); // NOI18N
        crossOverMethodsPanel.setForeground(resourceMap.getColor("functionPanel.foreground")); // NOI18N
        crossOverMethodsPanel.setName("crossOverMethodsPanel"); // NOI18N

        singlePointCheckBox.setForeground(resourceMap.getColor("singlePointCheckBox.foreground")); // NOI18N
        singlePointCheckBox.setSelected(true);
        singlePointCheckBox.setText(resourceMap.getString("singlePointCheckBox.text")); // NOI18N
        singlePointCheckBox.setName("singlePointCheckBox"); // NOI18N

        twoPointCheckBox.setForeground(resourceMap.getColor("twoPointCheckBox.foreground")); // NOI18N
        twoPointCheckBox.setText(resourceMap.getString("twoPointCheckBox.text")); // NOI18N
        twoPointCheckBox.setName("twoPointCheckBox"); // NOI18N

        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        cutSpliceCheckBox.setForeground(resourceMap.getColor("cutSpliceCheckBox.foreground")); // NOI18N
        cutSpliceCheckBox.setText(resourceMap.getString("cutSpliceCheckBox.text")); // NOI18N
        cutSpliceCheckBox.setName("cutSpliceCheckBox"); // NOI18N

        org.jdesktop.layout.GroupLayout crossOverMethodsPanelLayout = new org.jdesktop.layout.GroupLayout(crossOverMethodsPanel);
        crossOverMethodsPanel.setLayout(crossOverMethodsPanelLayout);
        crossOverMethodsPanelLayout.setHorizontalGroup(
            crossOverMethodsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(crossOverMethodsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(crossOverMethodsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cutSpliceCheckBox)
                    .add(jLabel1)
                    .add(jLabel7)
                    .add(twoPointCheckBox)
                    .add(singlePointCheckBox))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        crossOverMethodsPanelLayout.setVerticalGroup(
            crossOverMethodsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(crossOverMethodsPanelLayout.createSequentialGroup()
                .add(19, 19, 19)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(singlePointCheckBox)
                .add(10, 10, 10)
                .add(twoPointCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(cutSpliceCheckBox)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        geneticOperationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("geneticOperationPanel.border.title"))); // NOI18N
        geneticOperationPanel.setForeground(resourceMap.getColor("functionPanel.foreground")); // NOI18N
        geneticOperationPanel.setName("geneticOperationPanel"); // NOI18N

        binaryEncodingButton.setAction(actionMap.get("doBinaryEncoding")); // NOI18N
        binaryEncodingButton.setForeground(resourceMap.getColor("binaryEncodingButton.foreground")); // NOI18N
        binaryEncodingButton.setText(resourceMap.getString("binaryEncodingButton.text")); // NOI18N
        binaryEncodingButton.setToolTipText(resourceMap.getString("binaryEncodingButton.toolTipText")); // NOI18N
        binaryEncodingButton.setName("binaryEncodingButton"); // NOI18N

        selectionButton.setAction(actionMap.get("selectPopulation")); // NOI18N
        selectionButton.setForeground(resourceMap.getColor("selectionButton.foreground")); // NOI18N
        selectionButton.setText(resourceMap.getString("selectionButton.text")); // NOI18N
        selectionButton.setToolTipText(resourceMap.getString("selectionButton.toolTipText")); // NOI18N
        selectionButton.setName("selectionButton"); // NOI18N

        crossoverButton.setAction(actionMap.get("doCrossover")); // NOI18N
        crossoverButton.setForeground(resourceMap.getColor("crossoverButton.foreground")); // NOI18N
        crossoverButton.setText(resourceMap.getString("crossoverButton.text")); // NOI18N
        crossoverButton.setToolTipText(resourceMap.getString("crossoverButton.toolTipText")); // NOI18N
        crossoverButton.setName("crossoverButton"); // NOI18N

        org.jdesktop.layout.GroupLayout geneticOperationPanelLayout = new org.jdesktop.layout.GroupLayout(geneticOperationPanel);
        geneticOperationPanel.setLayout(geneticOperationPanelLayout);
        geneticOperationPanelLayout.setHorizontalGroup(
            geneticOperationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(geneticOperationPanelLayout.createSequentialGroup()
                .add(binaryEncodingButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectionButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(crossoverButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        geneticOperationPanelLayout.setVerticalGroup(
            geneticOperationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(geneticOperationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(geneticOperationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, geneticOperationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(selectionButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                        .add(crossoverButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, binaryEncodingButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        resultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("resultsPanel.border.title"))); // NOI18N
        resultsPanel.setForeground(resourceMap.getColor("functionPanel.foreground")); // NOI18N
        resultsPanel.setName("resultsPanel"); // NOI18N

        Results1.setFont(resourceMap.getFont("Results1.font")); // NOI18N
        Results1.setForeground(resourceMap.getColor("Results1.foreground")); // NOI18N
        Results1.setText(resourceMap.getString("Results1.text")); // NOI18N
        Results1.setName("Results1"); // NOI18N

        Results2.setFont(resourceMap.getFont("Results2.font")); // NOI18N
        Results2.setForeground(resourceMap.getColor("Results2.foreground")); // NOI18N
        Results2.setText(resourceMap.getString("Results2.text")); // NOI18N
        Results2.setName("Results2"); // NOI18N

        Results3.setFont(resourceMap.getFont("Results3.font")); // NOI18N
        Results3.setForeground(resourceMap.getColor("Results3.foreground")); // NOI18N
        Results3.setText(resourceMap.getString("Results3.text")); // NOI18N
        Results3.setName("Results3"); // NOI18N

        Results4.setFont(resourceMap.getFont("Results4.font")); // NOI18N
        Results4.setForeground(resourceMap.getColor("Results4.foreground")); // NOI18N
        Results4.setText(resourceMap.getString("Results4.text")); // NOI18N
        Results4.setName("Results4"); // NOI18N

        Results5.setFont(resourceMap.getFont("Results5.font")); // NOI18N
        Results5.setForeground(resourceMap.getColor("Results5.foreground")); // NOI18N
        Results5.setText(resourceMap.getString("Results5.text")); // NOI18N
        Results5.setName("Results5"); // NOI18N

        org.jdesktop.layout.GroupLayout resultsPanelLayout = new org.jdesktop.layout.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Results5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .add(resultsPanelLayout.createSequentialGroup()
                        .add(resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Results1)
                            .add(Results2))
                        .add(56, 56, 56)
                        .add(resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Results4)
                            .add(Results3))))
                .addContainerGap())
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultsPanelLayout.createSequentialGroup()
                .add(resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Results1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Results3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Results2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Results4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                .add(Results5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                                .add(functionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(18, 18, 18)
                                .add(crossOverMethodsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(geneticOperationPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(resultsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                        .add(titleLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 525, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(154, 154, 154))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(titleLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(crossOverMethodsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(functionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(resultsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(geneticOperationPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(49, 49, 49))
        );

        titleLable.getAccessibleContext().setAccessibleName(resourceMap.getString("jLabel1.AccessibleContext.accessibleName")); // NOI18N

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void function_Polynomial() {
        //TODO: Review Code

        char[] fun = new char[30]; // fun array used to store the function as charachter.
        fun = functionInputField.getText().toCharArray(); // store function in fun array as character.

        crossoverSolutionsOld[0] = 0;
        crossoverSolutionsOld[1] = 0;
        crossoverSolutionsOld[2] = 0;
        crossoverSolutionsOld[3] = 0;
        startX = Integer.parseInt(rangeFrom.getText());
        endX = Integer.parseInt(rangeTo.getText());

        range = Math.abs(endX) - Math.abs(startX);
        if (endX < 0 && startX < 0) {
            range = Math.abs(startX) - Math.abs(endX);
        }

        startY = Integer.parseInt(rangeFrom1.getText());
        endY = Integer.parseInt(rangeTo1.getText());

        rangeY = Math.abs(endY) - Math.abs(startY);
        if (endY < 0 && startY < 0) {
            range = Math.abs(startY) - Math.abs(endY);
        }

        solutions = new String[(range + 1) * (rangeY + 1)];
        BinaryEncoding = new String[(range + 1) * (rangeY + 1)];
        fitnessValues = new int[(range + 1) * (rangeY + 1)];

        // to intialize the array and set each element =0
        for (int i = 0; i <= range * rangeY; i++) {
            fitnessValues[i] = 0;
            solutions[i] = "";
        }

        // to give Sloution array Value and binary encoding and fitness function
        int count = 0;
        for (int i = startX; i <= endX; i++) {
            for (int j = startY; j <= endY; j++) {
                solutions[count] = i + "-" + j;
                Expression exp = new Expression(functionInputField.getText());
                exp.setVariable("x", Math.abs(i));
                exp.setVariable("y", Math.abs(j));
                double result = exp.resolve();
                fitnessValues[count] = (int) result;
                BinaryEncoding[count] = Integer.toBinaryString(i) + "." + Integer.toBinaryString(j);
                count++;
            }
        }

        bestMinValueX = Integer.parseInt(solutions[0].split("-")[0]);
        bestMaxValueX = Integer.parseInt(solutions[0].split("-")[0]);


        bestMinValueY = Integer.parseInt(solutions[0].split("-")[1]);
        bestMaxValueY = Integer.parseInt(solutions[0].split("-")[1]);

        bestMaxFitnessValue = fitnessValues[0];
        bestMinFitnessValue = fitnessValues[0];
                // to give Sloution array Value and binary encoding and fitness function
         count = 0;

                for (int i = startX; i <= endX; i++) {
            for (int j = startY; j <= endY; j++) {
            if (bestMaxFitnessValue < fitnessValues[count]) {
                bestMaxFitnessValue = fitnessValues[count];
                bestMaxValueX = Integer.parseInt(solutions[count].split("-")[0]);
                bestMaxValueY = Integer.parseInt(solutions[count].split("-")[1]);
            }
            if (bestMinFitnessValue > fitnessValues[count]) {
                bestMinFitnessValue = fitnessValues[count];
                bestMinValueX = Integer.parseInt(solutions[count].split("-")[0]);
                bestMinValueY = Integer.parseInt(solutions[count].split("-")[1]);
            }
count++;
        }
                }
    }

    @Action
    public void doBinaryEncoding() {
        function_Polynomial();


        EncodingTable newContentPane = new EncodingTable(solutions, BinaryEncoding, fitnessValues, ((range + 1) * (rangeY + 1)));
        if (showTable == true) {
            JFrame frame = new JFrame("Encoding Table");
            newContentPane.setOpaque(true); //content panes must be opaque
            frame.setContentPane(newContentPane);
            frame.setLocation(10, 0);
            frame.setSize(400, 200);
            frame.setVisible(true);
        }
    }

    @Action
    public void selectPopulation() {
        Random random = new Random();
        selectionBinaryEncoding = new String[4];
        selectionFitnessValues = new int[4];
        selectionSolutions = new String[4];
        range = endX - startX;
        int r[] = new int[4];
        r[0] = random.nextInt((int) ((range - 1)) / 2);
        r[1] = (int) ((range - 1)) / 4 + random.nextInt((int) ((range - 1)) / 4);
        r[2] = (int) ((range - 1) / 2) + random.nextInt((int) (range - 1) / 4);
        r[3] = (int) ((range - 1) / 2) + (int) ((range - 1) / 4) + random.nextInt((int) ((range - 1) / 4));
        System.out.println(r[3]);
        int rr[] = new int[4];
        rr[2] = random.nextInt((int) ((rangeY - 1)) / 2);
        rr[3] = (int) ((rangeY - 1)) / 2 + random.nextInt((int) ((rangeY - 1)) / 2);
        rr[2] = (int) ((rangeY - 1) / 2) + random.nextInt((int) (rangeY - 1) / 4);
        rr[3] = (int) ((rangeY - 1) / 2) + (int) ((rangeY - 1) / 4) + random.nextInt((int) ((rangeY - 1) / 4));

        for (int i = 0; i < 4; i++) {
            selectionBinaryEncoding[i] = BinaryEncoding[r[i] * rangeY];
            selectionFitnessValues[i] = fitnessValues[r[i] * rangeY];
            selectionSolutions[i] = solutions[r[i] * rangeY];
        }
        if (showTable == true) {
            JFrame frame = new JFrame("Selection Table");
            EncodingTable newContentPane = new EncodingTable(selectionSolutions, selectionBinaryEncoding, selectionFitnessValues, 4);
            newContentPane.setOpaque(true); //content panes must be opaque
            frame.setContentPane(newContentPane);
            frame.setLocation(10, 230);
            frame.setSize(400, 110);
            frame.setVisible(true);
        }
    }

    @Action
    public void doCrossover() {

        int[] crossoverMeth;
        crossoverMeth = new int[4];
        singlePointCheckBox.isSelected();
        twoPointCheckBox.isSelected();
        cutSpliceCheckBox.isSelected();

        /****************************/
        String str;
        String[] c = new String[8];

        for (int x = 2; x < 4; x++) {
            System.out.println(x+" hi binary "+selectionBinaryEncoding[x]);
            String s = selectionBinaryEncoding[x].split("\\.")[0];
            String ss = selectionBinaryEncoding[x].split("\\.")[1];
            crossoverSolutions[3 - x] = selectionSolutions[x];
            crossoverfitnessValues[3 - x] = selectionFitnessValues[x];

            int p = s.length() - 1;

            int u = 13;
            for (; u > 13 - s.length(); u--) {
                crossover[3 - x][u] = s.charAt(p);
                p--;
            }
            int cc = u;
            for (int l = 0; l <= u; l++) {
                crossover[3 - x][l] = '0';
            }

            int pp = ss.length() - 1;

            int uu = 13;
            for (; uu > 13 - ss.length(); uu--) {
                crossover2[3 - x][uu] = ss.charAt(pp);
                pp--;
            }
            int ccc = uu;
            for (int ll = 0; ll <= uu; ll++) {
                crossover2[3 - x][ll] = '0';
            }

        }


        crossover[2][0] = crossover[0][0];
        crossover[2][1] = crossover[0][1];
        crossover[2][2] = crossover[0][2];
        crossover[2][3] = crossover[0][3];
        crossover[2][4] = crossover[0][4];
        crossover[2][5] = crossover[0][5];
        crossover[2][6] = crossover[0][6];
        crossover[2][7] = crossover[0][7];
        crossover[2][8] = crossover[0][8];
        crossover[2][9] = crossover[0][9];
        crossover[2][10] = crossover[1][10];
        crossover[2][11] = crossover[1][11];
        crossover[2][12] = crossover[1][12];
        crossover[2][13] = crossover[1][13];
        crossover[3][0] = crossover[1][0];
        crossover[3][1] = crossover[1][1];
        crossover[3][2] = crossover[1][2];
        crossover[3][3] = crossover[1][3];
        crossover[3][4] = crossover[1][4];
        crossover[3][5] = crossover[1][5];
        crossover[3][6] = crossover[1][6];
        crossover[3][7] = crossover[1][7];
        crossover[3][8] = crossover[1][8];
        crossover[3][9] = crossover[1][9];
        crossover[3][10] = crossover[0][10];
        crossover[3][11] = crossover[0][11];
        crossover[3][12] = crossover[0][12];
        crossover[3][13] = crossover[0][13];


        crossover2[2][0] = crossover2[0][0];
        crossover2[2][1] = crossover2[0][1];
        crossover2[2][2] = crossover2[0][2];
        crossover2[2][3] = crossover2[0][3];
        crossover2[2][4] = crossover2[0][4];
        crossover2[2][5] = crossover2[0][5];
        crossover2[2][6] = crossover2[0][6];
        crossover2[2][7] = crossover2[0][7];
        crossover2[2][8] = crossover2[0][8];
        crossover2[2][9] = crossover2[0][9];
        crossover2[2][10] = crossover2[1][10];
        crossover2[2][11] = crossover2[1][11];
        crossover2[2][12] = crossover2[1][12];
        crossover2[2][13] = crossover2[1][13];
        crossover2[3][0] = crossover2[1][0];
        crossover2[3][1] = crossover2[1][1];
        crossover2[3][2] = crossover2[1][2];
        crossover2[3][3] = crossover2[1][3];
        crossover2[3][4] = crossover2[1][4];
        crossover2[3][5] = crossover2[1][5];
        crossover2[3][6] = crossover2[1][6];
        crossover2[3][7] = crossover2[1][7];
        crossover2[3][8] = crossover2[1][8];
        crossover2[3][9] = crossover2[1][9];
        crossover2[3][10] = crossover2[0][10];
        crossover2[3][11] = crossover2[0][11];
        crossover2[3][12] = crossover2[0][12];
        crossover2[3][13] = crossover2[0][13];


        String str3 = "";
        for (int i = 0; i < 14; i++) {
            str3 = str3 + crossover[0][i];
        }
        c[0] = str3;

        String str4 = "";
        for (int i = 0; i < 14; i++) {
            str4 = str4 + crossover[1][i];
        }
        c[1] = str4;

        String str1 = "";
        for (int i = 0; i < 14; i++) {
            str1 = str1 + crossover[2][i];
        }
        c[2] = str1;

        String str33 = "";
        for (int i = 0; i < 14; i++) {
            str33 = str33 + crossover2[0][i];
        }
        c[4] = str33;

        String str44 = "";
        for (int i = 0; i < 14; i++) {
            str44 = str44 + crossover2[1][i];
        }
        c[5] = str44;

        String str11 = "";
        for (int i = 0; i < 14; i++) {
            str11 = str11 + crossover2[2][i];
        }
        c[6] = str11;
        System.out.println(str1 + " " + str11);
        crossoverSolutions[2] = Integer.parseInt(str1, 2) + "-" + Integer.parseInt(str11, 2);
        Expression exp = new Expression(functionInputField.getText());
        exp.setVariable("x", Integer.parseInt(str1, 2));
        exp.setVariable("y", Integer.parseInt(str11, 2));
        double result = exp.resolve();
        crossoverfitnessValues[2] = (int) result;

        String str2 = "";
        for (int i = 0; i < 14; i++) {
            str2 = str2 + crossover[3][i];
        }

        String str22 = "";
        for (int i = 0; i < 14; i++) {
            str22 = str22 + crossover2[3][i];
        }
        crossoverSolutions[3] = Integer.parseInt(str2, 2) + "-" + Integer.parseInt(str22, 2);
        Expression exp1 = new Expression(functionInputField.getText());
        exp1.setVariable("x", Integer.parseInt(str2, 2));
        exp1.setVariable("y", Integer.parseInt(str22, 2));
        result = exp1.resolve();
        crossoverfitnessValues[3] = (int) result;
        c[3] = str2;
        c[7] = str22;

        c[0] = c[0] + "." + c[4];
        c[1] = c[1] + "." + c[5];
        c[2] = c[2] + "." + c[6];
        c[3] = c[3] + "." + c[7];

        float avg = (crossoverfitnessValues[0] + crossoverfitnessValues[1] + crossoverfitnessValues[2] + crossoverfitnessValues[3]) / 4;



        if (showTable == true) {

            JFrame frame = new JFrame("Single Point Crossover Table");
            EncodingTable newContentPane = new EncodingTable(crossoverSolutions, c, crossoverfitnessValues, 4);
            newContentPane.setOpaque(true); //content panes must be opaque
            frame.setContentPane(newContentPane);
            frame.setLocation(10, 350);
            frame.setSize(400, 110);
            frame.setVisible(true);

            if (jRadioButton1.isSelected()) {
                Arrays.sort(crossoverSolutions);
            } else {
                int i;
                for (i = 0; i < crossoverSolutions.length / 2; i++) {
                    String temp = crossoverSolutions[i];
                    crossoverSolutions[i] = crossoverSolutions[crossoverSolutions.length - 1 - i];
                    crossoverSolutions[crossoverSolutions.length - 1 - i] = temp;
                }
            }
//            if (Integer.parseInt(crossoverSolutions[3].split()) > Integer.parseInt(rangeTo.getText())) {
//                selectionBinaryEncoding[3] = Integer.toBinaryString(0);
//
//                selectionSolutions[3] = 0;
//                exp1 = new Expression(functionInputField.getText());
//                exp1.setVariable("x", selectionSolutions[3]);
//                result = exp1.resolve();
//                selectionFitnessValues[3] = (int) result;
//
//            } else if (crossoverSolutions[2] > Integer.parseInt(rangeTo.getText())) {
//                selectionBinaryEncoding[2] = Integer.toBinaryString(0);
//
//                selectionSolutions[2] = 0;
//                exp1 = new Expression(functionInputField.getText());
//                exp1.setVariable("x", 0);
//                result = exp1.resolve();
//                selectionFitnessValues[2] = (int) result;
//
//            } else {
            selectionBinaryEncoding[3] = Integer.toBinaryString(Integer.parseInt(crossoverSolutions[3].split("-")[0])) + "." + Integer.toBinaryString(Integer.parseInt(crossoverSolutions[3].split("-")[1]));
            selectionBinaryEncoding[2] = Integer.toBinaryString(Integer.parseInt(crossoverSolutions[2].split("-")[0])) + "." + Integer.toBinaryString(Integer.parseInt(crossoverSolutions[2].split("-")[1]));
            selectionSolutions[3] = crossoverSolutions[3];
            selectionSolutions[2] = crossoverSolutions[2];
            exp1 = new Expression(functionInputField.getText());
            exp1.setVariable("x", Integer.parseInt(crossoverSolutions[3].split("-")[0]));
            exp1.setVariable("y", Integer.parseInt(crossoverSolutions[3].split("-")[1]));
            result = exp1.resolve();
            selectionFitnessValues[3] = (int) result;
            exp1.setVariable("x", Integer.parseInt(crossoverSolutions[2].split("-")[0]));
            exp1.setVariable("y", Integer.parseInt(crossoverSolutions[2].split("-")[1]));
            result = exp1.resolve();
            
            selectionFitnessValues[2] = (int) result;
            //  }

            if (avg <= newAVG) {
                count = 100;
                mutation();
            } else {
                newAVG = avg;
            }
        }
        System.out.println(avg);
    }

    public void doTwoPointCrossover(){
        
        int[] crossoverMeth;
        crossoverMeth = new int[4];
        singlePointCheckBox.isSelected();
        twoPointCheckBox.isSelected();
        cutSpliceCheckBox.isSelected();

        /****************************/
        String str;
        String[] c = new String[8];

        for (int x = 2; x < 4; x++) {
            System.out.println(x+" hi binary "+selectionBinaryEncoding[x]);
            String s = selectionBinaryEncoding[x].split("\\.")[0];
            String ss = selectionBinaryEncoding[x].split("\\.")[1];
            crossoverSolutions[3 - x] = selectionSolutions[x];
            crossoverfitnessValues[3 - x] = selectionFitnessValues[x];

            int p = s.length() - 1;

            int u = 13;
            for (; u > 13 - s.length(); u--) {
                crossover[3 - x][u] = s.charAt(p);
                p--;
            }
            int cc = u;
            for (int l = 0; l <= u; l++) {
                crossover[3 - x][l] = '0';
            }

            int pp = ss.length() - 1;

            int uu = 13;
            for (; uu > 13 - ss.length(); uu--) {
                crossover2[3 - x][uu] = ss.charAt(pp);
                pp--;
            }
            int ccc = uu;
            for (int ll = 0; ll <= uu; ll++) {
                crossover2[3 - x][ll] = '0';
            }

        }


          crossover[2][0] = crossover[0][0];
        crossover[2][1] = crossover[0][1];
        crossover[2][2] = crossover[0][2];
        crossover[2][3] = crossover[0][3];
        crossover[2][4] = crossover[0][4];
        crossover[2][5] = crossover[0][5];
        crossover[2][6] = crossover[0][6];
        crossover[2][7] = crossover[0][7];
        crossover[2][8] = crossover[0][8];
        crossover[2][9] = crossover[1][9];
        crossover[2][10] = crossover[1][10];
        crossover[2][11] = crossover[1][11];
        crossover[2][12] = crossover[0][12];
        crossover[2][13] = crossover[0][13];
        crossover[3][0] = crossover[1][0];
        crossover[3][1] = crossover[1][1];
        crossover[3][2] = crossover[1][2];
        crossover[3][3] = crossover[1][3];
        crossover[3][4] = crossover[1][4];
        crossover[3][5] = crossover[1][5];
        crossover[3][6] = crossover[1][6];
        crossover[3][7] = crossover[1][7];
        crossover[3][8] = crossover[1][8];
        crossover[3][9] = crossover[0][9];
        crossover[3][10] = crossover[0][10];
        crossover[3][11] = crossover[0][11];
        crossover[3][12] = crossover[1][12];
        crossover[3][13] = crossover[1][13];


        crossover2[2][0] = crossover2[0][0];
        crossover2[2][1] = crossover2[0][1];
        crossover2[2][2] = crossover2[0][2];
        crossover2[2][3] = crossover2[0][3];
        crossover2[2][4] = crossover2[0][4];
        crossover2[2][5] = crossover2[0][5];
        crossover2[2][6] = crossover2[0][6];
        crossover2[2][7] = crossover2[0][7];
        crossover2[2][8] = crossover2[0][8];
        crossover2[2][9] = crossover2[1][9];
        crossover2[2][10] = crossover2[1][10];
        crossover2[2][11] = crossover2[1][11];
        crossover2[2][12] = crossover2[0][12];
        crossover2[2][13] = crossover2[0][13];
        crossover2[3][0] = crossover2[1][0];
        crossover2[3][1] = crossover2[1][1];
        crossover2[3][2] = crossover2[1][2];
        crossover2[3][3] = crossover2[1][3];
        crossover2[3][4] = crossover2[1][4];
        crossover2[3][5] = crossover2[1][5];
        crossover2[3][6] = crossover2[1][6];
        crossover2[3][7] = crossover2[1][7];
        crossover2[3][8] = crossover2[1][8];
        crossover2[3][9] = crossover2[0][9];
        crossover2[3][10] = crossover2[0][10];
        crossover2[3][11] = crossover2[0][11];
        crossover2[3][12] = crossover2[1][12];
        crossover2[3][13] = crossover2[1][13];


        String str3 = "";
        for (int i = 0; i < 14; i++) {
            str3 = str3 + crossover[0][i];
        }
        c[0] = str3;

        String str4 = "";
        for (int i = 0; i < 14; i++) {
            str4 = str4 + crossover[1][i];
        }
        c[1] = str4;

        String str1 = "";
        for (int i = 0; i < 14; i++) {
            str1 = str1 + crossover[2][i];
        }
        c[2] = str1;

        String str33 = "";
        for (int i = 0; i < 14; i++) {
            str33 = str33 + crossover2[0][i];
        }
        c[4] = str33;

        String str44 = "";
        for (int i = 0; i < 14; i++) {
            str44 = str44 + crossover2[1][i];
        }
        c[5] = str44;

        String str11 = "";
        for (int i = 0; i < 14; i++) {
            str11 = str11 + crossover2[2][i];
        }
        c[6] = str11;
        System.out.println(str1 + " " + str11);
        crossoverSolutions[2] = Integer.parseInt(str1, 2) + "-" + Integer.parseInt(str11, 2);
        Expression exp = new Expression(functionInputField.getText());
        exp.setVariable("x", Integer.parseInt(str1, 2));
        exp.setVariable("y", Integer.parseInt(str11, 2));
        double result = exp.resolve();
        crossoverfitnessValues[2] = (int) result;

        String str2 = "";
        for (int i = 0; i < 14; i++) {
            str2 = str2 + crossover[3][i];
        }

        String str22 = "";
        for (int i = 0; i < 14; i++) {
            str22 = str22 + crossover2[3][i];
        }
        crossoverSolutions[3] = Integer.parseInt(str2, 2) + "-" + Integer.parseInt(str22, 2);
        Expression exp1 = new Expression(functionInputField.getText());
        exp1.setVariable("x", Integer.parseInt(str2, 2));
        exp1.setVariable("y", Integer.parseInt(str22, 2));
        result = exp1.resolve();
        crossoverfitnessValues[3] = (int) result;
        c[3] = str2;
        c[7] = str22;

        c[0] = c[0] + "." + c[4];
        c[1] = c[1] + "." + c[5];
        c[2] = c[2] + "." + c[6];
        c[3] = c[3] + "." + c[7];

        float avg = (crossoverfitnessValues[0] + crossoverfitnessValues[1] + crossoverfitnessValues[2] + crossoverfitnessValues[3]) / 4;



        if (showTable == true) {

            JFrame frame = new JFrame("Two Point Crossover Table");
            EncodingTable newContentPane = new EncodingTable(crossoverSolutions, c, crossoverfitnessValues, 4);
            newContentPane.setOpaque(true); //content panes must be opaque
            frame.setContentPane(newContentPane);
            frame.setLocation(10, 350);
            frame.setSize(400, 110);
            frame.setVisible(true);

            if (jRadioButton1.isSelected()) {
                Arrays.sort(crossoverSolutions);
            } else {
                int i;
                for (i = 0; i < crossoverSolutions.length / 2; i++) {
                    String temp = crossoverSolutions[i];
                    crossoverSolutions[i] = crossoverSolutions[crossoverSolutions.length - 1 - i];
                    crossoverSolutions[crossoverSolutions.length - 1 - i] = temp;
                }
            }
//            if (Integer.parseInt(crossoverSolutions[3].split()) > Integer.parseInt(rangeTo.getText())) {
//                selectionBinaryEncoding[3] = Integer.toBinaryString(0);
//
//                selectionSolutions[3] = 0;
//                exp1 = new Expression(functionInputField.getText());
//                exp1.setVariable("x", selectionSolutions[3]);
//                result = exp1.resolve();
//                selectionFitnessValues[3] = (int) result;
//
//            } else if (crossoverSolutions[2] > Integer.parseInt(rangeTo.getText())) {
//                selectionBinaryEncoding[2] = Integer.toBinaryString(0);
//
//                selectionSolutions[2] = 0;
//                exp1 = new Expression(functionInputField.getText());
//                exp1.setVariable("x", 0);
//                result = exp1.resolve();
//                selectionFitnessValues[2] = (int) result;
//
//            } else {
            selectionBinaryEncoding[3] = Integer.toBinaryString(Integer.parseInt(crossoverSolutions[3].split("-")[0])) + "." + Integer.toBinaryString(Integer.parseInt(crossoverSolutions[3].split("-")[1]));
            selectionBinaryEncoding[2] = Integer.toBinaryString(Integer.parseInt(crossoverSolutions[2].split("-")[0])) + "." + Integer.toBinaryString(Integer.parseInt(crossoverSolutions[2].split("-")[1]));
            selectionSolutions[3] = crossoverSolutions[3];
            selectionSolutions[2] = crossoverSolutions[2];
            exp1 = new Expression(functionInputField.getText());
            exp1.setVariable("x", Integer.parseInt(crossoverSolutions[3].split("-")[0]));
            exp1.setVariable("y", Integer.parseInt(crossoverSolutions[3].split("-")[1]));
            result = exp1.resolve();
            selectionFitnessValues[3] = (int) result;
            exp1.setVariable("x", Integer.parseInt(crossoverSolutions[2].split("-")[0]));
            exp1.setVariable("y", Integer.parseInt(crossoverSolutions[2].split("-")[1]));
            result = exp1.resolve();
            selectionFitnessValues[2] = (int) result;
            //  }

            if (avg <= newAVG) {
                count = 100;
                mutation();
            } else {
                newAVG = avg;
            }
        }
        System.out.println(avg);

    }
  

    public void doCutSpliceCrossover(){
        
        int[] crossoverMeth;
        crossoverMeth = new int[4];
        singlePointCheckBox.isSelected();
        twoPointCheckBox.isSelected();
        cutSpliceCheckBox.isSelected();

        /****************************/
        String str;
        String[] c = new String[8];

        for (int x = 2; x < 4; x++) {
            System.out.println(x+" hi binary "+selectionBinaryEncoding[x]);
            String s = selectionBinaryEncoding[x].split("\\.")[0];
            String ss = selectionBinaryEncoding[x].split("\\.")[1];
            crossoverSolutions[3 - x] = selectionSolutions[x];
            crossoverfitnessValues[3 - x] = selectionFitnessValues[x];

            int p = s.length() - 1;

            int u = 13;
            for (; u > 13 - s.length(); u--) {
                crossover[3 - x][u] = s.charAt(p);
                p--;
            }
            int cc = u;
            for (int l = 0; l <= u; l++) {
                crossover[3 - x][l] = '0';
            }

            int pp = ss.length() - 1;

            int uu = 13;
            for (; uu > 13 - ss.length(); uu--) {
                crossover2[3 - x][uu] = ss.charAt(pp);
                pp--;
            }
            int ccc = uu;
            for (int ll = 0; ll <= uu; ll++) {
                crossover2[3 - x][ll] = '0';
            }

        }


          crossover[2][0] = crossover[0][0];
        crossover[2][1] = crossover[0][1];
        crossover[2][2] = crossover[0][2];
        crossover[2][3] = crossover[0][3];
        crossover[2][4] = crossover[0][4];
        crossover[2][5] = crossover[0][5];
        crossover[2][6] = crossover[0][6];
        crossover[2][7] = crossover[0][7];
        crossover[2][8] = crossover[0][8];
        crossover[2][9] = crossover[1][0];
        crossover[2][10] = crossover[1][1];
        crossover[2][11] = crossover[1][2];
        crossover[2][12] = crossover[1][3];
        crossover[2][13] = crossover[1][4];
        crossover[3][0] = crossover[0][9];
        crossover[3][1] = crossover[0][10];
        crossover[3][2] = crossover[0][11];
        crossover[3][3] = crossover[0][12];
        crossover[3][4] = crossover[0][13];
        crossover[3][5] = crossover[1][5];
        crossover[3][6] = crossover[1][6];
        crossover[3][7] = crossover[1][7];
        crossover[3][8] = crossover[1][8];
        crossover[3][9] = crossover[1][9];
        crossover[3][10] = crossover[1][10];
        crossover[3][11] = crossover[1][11];
        crossover[3][12] = crossover[1][12];
        crossover[3][13] = crossover[1][13];


        crossover2[2][0] = crossover2[0][0];
        crossover2[2][1] = crossover2[0][1];
        crossover2[2][2] = crossover2[0][2];
        crossover2[2][3] = crossover2[0][3];
        crossover2[2][4] = crossover2[0][4];
        crossover2[2][5] = crossover2[0][5];
        crossover2[2][6] = crossover2[0][6];
        crossover2[2][7] = crossover2[0][7];
        crossover2[2][8] = crossover2[0][8];
        crossover2[2][9] = crossover2[1][0];
        crossover2[2][10] = crossover2[1][1];
        crossover2[2][11] = crossover2[1][2];
        crossover2[2][12] = crossover2[1][3];
        crossover2[2][13] = crossover2[1][4];
        crossover2[3][0] = crossover2[0][9];
        crossover2[3][1] = crossover2[0][10];
        crossover2[3][2] = crossover2[0][11];
        crossover2[3][3] = crossover2[0][12];
        crossover2[3][4] = crossover2[0][13];
        crossover2[3][5] = crossover2[1][5];
        crossover2[3][6] = crossover2[1][6];
        crossover2[3][7] = crossover2[1][7];
        crossover2[3][8] = crossover2[1][8];
        crossover2[3][9] = crossover2[1][9];
        crossover2[3][10] = crossover2[1][10];
        crossover2[3][11] = crossover2[1][11];
        crossover2[3][12] = crossover2[1][12];
        crossover2[3][13] = crossover2[1][13];


        String str3 = "";
        for (int i = 0; i < 14; i++) {
            str3 = str3 + crossover[0][i];
        }
        c[0] = str3;

        String str4 = "";
        for (int i = 0; i < 14; i++) {
            str4 = str4 + crossover[1][i];
        }
        c[1] = str4;

        String str1 = "";
        for (int i = 0; i < 14; i++) {
            str1 = str1 + crossover[2][i];
        }
        c[2] = str1;

        String str33 = "";
        for (int i = 0; i < 14; i++) {
            str33 = str33 + crossover2[0][i];
        }
        c[4] = str33;

        String str44 = "";
        for (int i = 0; i < 14; i++) {
            str44 = str44 + crossover2[1][i];
        }
        c[5] = str44;

        String str11 = "";
        for (int i = 0; i < 14; i++) {
            str11 = str11 + crossover2[2][i];
        }
        c[6] = str11;
        System.out.println(str1 + " " + str11);
        crossoverSolutions[2] = Integer.parseInt(str1, 2) + "-" + Integer.parseInt(str11, 2);
        Expression exp = new Expression(functionInputField.getText());
        exp.setVariable("x", Integer.parseInt(str1, 2));
        exp.setVariable("y", Integer.parseInt(str11, 2));
        double result = exp.resolve();
        crossoverfitnessValues[2] = (int) result;

        String str2 = "";
        for (int i = 0; i < 14; i++) {
            str2 = str2 + crossover[3][i];
        }

        String str22 = "";
        for (int i = 0; i < 14; i++) {
            str22 = str22 + crossover2[3][i];
        }
        crossoverSolutions[3] = Integer.parseInt(str2, 2) + "-" + Integer.parseInt(str22, 2);
        Expression exp1 = new Expression(functionInputField.getText());
        exp1.setVariable("x", Integer.parseInt(str2, 2));
        exp1.setVariable("y", Integer.parseInt(str22, 2));
        result = exp1.resolve();
        crossoverfitnessValues[3] = (int) result;
        c[3] = str2;
        c[7] = str22;

        c[0] = c[0] + "." + c[4];
        c[1] = c[1] + "." + c[5];
        c[2] = c[2] + "." + c[6];
        c[3] = c[3] + "." + c[7];

        float avg = (crossoverfitnessValues[0] + crossoverfitnessValues[1] + crossoverfitnessValues[2] + crossoverfitnessValues[3]) / 4;



        if (showTable == true) {

            JFrame frame = new JFrame("Cut Splice Crossover Table");
            EncodingTable newContentPane = new EncodingTable(crossoverSolutions, c, crossoverfitnessValues, 4);
            newContentPane.setOpaque(true); //content panes must be opaque
            frame.setContentPane(newContentPane);
            frame.setLocation(10, 350);
            frame.setSize(400, 110);
            frame.setVisible(true);

            if (jRadioButton1.isSelected()) {
                Arrays.sort(crossoverSolutions);
            } else {
                int i;
                for (i = 0; i < crossoverSolutions.length / 2; i++) {
                    String temp = crossoverSolutions[i];
                    crossoverSolutions[i] = crossoverSolutions[crossoverSolutions.length - 1 - i];
                    crossoverSolutions[crossoverSolutions.length - 1 - i] = temp;
                }
            }
//            if (Integer.parseInt(crossoverSolutions[3].split()) > Integer.parseInt(rangeTo.getText())) {
//                selectionBinaryEncoding[3] = Integer.toBinaryString(0);
//
//                selectionSolutions[3] = 0;
//                exp1 = new Expression(functionInputField.getText());
//                exp1.setVariable("x", selectionSolutions[3]);
//                result = exp1.resolve();
//                selectionFitnessValues[3] = (int) result;
//
//            } else if (crossoverSolutions[2] > Integer.parseInt(rangeTo.getText())) {
//                selectionBinaryEncoding[2] = Integer.toBinaryString(0);
//
//                selectionSolutions[2] = 0;
//                exp1 = new Expression(functionInputField.getText());
//                exp1.setVariable("x", 0);
//                result = exp1.resolve();
//                selectionFitnessValues[2] = (int) result;
//
//            } else {
            selectionBinaryEncoding[3] = Integer.toBinaryString(Integer.parseInt(crossoverSolutions[3].split("-")[0])) + "." + Integer.toBinaryString(Integer.parseInt(crossoverSolutions[3].split("-")[1]));
            selectionBinaryEncoding[2] = Integer.toBinaryString(Integer.parseInt(crossoverSolutions[2].split("-")[0])) + "." + Integer.toBinaryString(Integer.parseInt(crossoverSolutions[2].split("-")[1]));
            selectionSolutions[3] = crossoverSolutions[3];
            selectionSolutions[2] = crossoverSolutions[2];
            exp1 = new Expression(functionInputField.getText());
            exp1.setVariable("x", Integer.parseInt(crossoverSolutions[3].split("-")[0]));
            exp1.setVariable("y", Integer.parseInt(crossoverSolutions[3].split("-")[1]));
            result = exp1.resolve();
            selectionFitnessValues[3] = (int) result;
            exp1.setVariable("x", Integer.parseInt(crossoverSolutions[2].split("-")[0]));
            exp1.setVariable("y", Integer.parseInt(crossoverSolutions[2].split("-")[1]));
            result = exp1.resolve();
            selectionFitnessValues[2] = (int) result;
            //  }

            if (avg <= newAVG) {
                count = 100;
                mutation();
            } else {
                newAVG = avg;
            }
        }
        System.out.println(avg);

    
    }
   

    @Action
    public void go() {
        double startExecutionTime = System.currentTimeMillis();

        count = 1;
        startX = 0;
        endX = 0;
        mutation = 0;

        for (int y = 0; y <= 3; y++) {

            crossoverfitnessValues[y] = 0;
            crossoverSolutionsOld[y] = 0;
            crossoverSolutions[y] = "";
            for (int i = 0; i < 14; i++) {
                crossover[y][i] = '0';
            }

        }
        showTable = true;
        isMutate = false;
        mutation = 0;
        showTable = false;
        doBinaryEncoding();
        selectPopulation();
        Random randomGenerator = new Random();
        int size = 0;
        size = Integer.valueOf((String) jComboBox1.getSelectedItem());

        int j = 0;
        if (singlePointCheckBox.isSelected()) {
            j = 1;
        }
        if (twoPointCheckBox.isSelected()) {
            j = 2;
        }
        if (cutSpliceCheckBox.isSelected()) {
            j = 3;
        }
        for (int i = 0; i < size; i++) {
            generation++;

            if (mutation > 1) {
                System.out.println("Generation = " + i);
                break;

            }


            showTable = true;
            if (i == 2) {
                showTable = true;
            }
            int randomInt = randomGenerator.nextInt(j);

            switch (randomInt) {
                case 0:
                    doCrossover();
                    break;
                case 2:
                    doCutSpliceCrossover();
                    break;
                case 1:
                    doTwoPointCrossover();
                    break;
            }
        }
        showTable = true;
        double endExecutionTime = System.currentTimeMillis();
        Results1.setText("Generations = " + (generation - 1));
        Results2.setText("Mutations = " + (mutation - 1));
        Results3.setText("Execution Time = " + (endExecutionTime - startExecutionTime) + "ms");
        double accuracy = 3;//(double) ((double) crossoverSolutions[3] / (double) endX) * 100;
        System.out.println("hi crossover " + crossoverSolutions[3]);
        System.out.println("hi endx " + endX);
        String b = " ";
      
        int xx = Integer.parseInt(crossoverSolutions[3].split("-")[0]);
        int yy = Integer.parseInt(crossoverSolutions[3].split("-")[1]);
  
          if (jRadioButton1.isSelected()) {
              accuracy = (double) ((((double) xx / (double) bestMaxValueX) * 100) + (((double) yy / (double) bestMaxValueY) * 100))/2;
         
        } else {
 accuracy = (double) (((double) xx / (double) bestMinValueX) * 100) + (((double) yy / (double) bestMinValueY) * 100);        }
            b = b + accuracy;
        Results4.setText("Accuracy = " + b + "%");
        if (jRadioButton1.isSelected()) {
            Results5.setText("The best solution is " + crossoverSolutions[3] + " and the expected solution is " + bestMaxValueX+" - "+bestMaxValueY);
        } else {
            Results5.setText("The best solution is " + crossoverSolutions[3] + " and the expected solution is " + bestMinValueX+" - " +bestMinValueY);
        }

        System.out.println("hi b" + b);
    }

    /**
     * 
     */
    public void mutation() {
       
        //flip bit
        switch (crossover[3][10]) {
            case '0':
                crossover[3][10] = '1';
                String str2 = "";
                for (int i = 0; i < 14; i++) {
                    str2 = str2 + crossover[3][i];
                }
                crossover2[3][10] = '1';
                String str222 = "";
                for (int i = 0; i < 14; i++) {
                    str222 = str222 + crossover2[3][i];
                }
                selectionBinaryEncoding[3] = str2+"."+str222;

                Expression exp1 = new Expression(functionInputField.getText());
                exp1.setVariable("x", Integer.parseInt(str2, 2));
                exp1.setVariable("y", Integer.parseInt(str222, 2));
                double result = exp1.resolve();
                selectionSolutions[3] = Integer.parseInt(str2, 2) + "-" + Integer.parseInt(str222, 2);
                selectionFitnessValues[3] = (int) result;

                break;
            case '1':
                crossover[3][10] = '0';
                String str22 = "";
                for (int i = 0; i < 14; i++) {
                    str22 = str22 + crossover[3][i];
                }
                crossover2[3][10] = '0';
                String str2222 = "";
                for (int i = 0; i < 14; i++) {
                    str2222 = str2222 + crossover2[3][i];
                }
                selectionBinaryEncoding[3] = str22+"."+str2222;

                Expression exp12 = new Expression(functionInputField.getText());
                exp12.setVariable("x", Integer.parseInt(str22, 2));
                exp12.setVariable("y", Integer.parseInt(str2222, 2));
                double result2 = exp12.resolve();
                selectionSolutions[3] = Integer.parseInt(str22, 2) + "-" + Integer.parseInt(str2222, 2);


                selectionFitnessValues[3] = (int) result2;

                break;
        }
        newAVG = 0;
        mutation = mutation + 1;
        isMutate = true;
        System.out.println("mutation = " + mutation);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Results1;
    private javax.swing.JLabel Results2;
    private javax.swing.JLabel Results3;
    private javax.swing.JLabel Results4;
    private javax.swing.JLabel Results5;
    private javax.swing.JButton binaryEncodingButton;
    private javax.swing.JPanel crossOverMethodsPanel;
    private javax.swing.JButton crossoverButton;
    private javax.swing.JCheckBox cutSpliceCheckBox;
    private javax.swing.JTextField functionInputField;
    private javax.swing.JPanel functionPanel;
    private javax.swing.JPanel geneticOperationPanel;
    private javax.swing.JButton goButton;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField rangeFrom;
    private javax.swing.JTextField rangeFrom1;
    private javax.swing.JTextField rangeTo;
    private javax.swing.JTextField rangeTo1;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JButton selectionButton;
    private javax.swing.JCheckBox singlePointCheckBox;
    private javax.swing.JLabel titleLable;
    private javax.swing.JCheckBox twoPointCheckBox;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
    public String solutions[];
    public String BinaryEncoding[];
    public int fitnessValues[];
    public String selectionSolutions[];
    public int selectionFitnessValues[];
    public String selectionBinaryEncoding[];
    int range; // where range is end-sub.
    int rangeY; // where range is end-sub.
    public int bestMaxValueX = 0;
    public int bestMinValueX = 0;
    public int bestMaxValueY = 0;
    public int bestMinValueY = 0;
    public int bestMaxFitnessValue = 0;
    public int bestMinFitnessValue = 0;
    int a, b, c, d, e, f;
    public int count = 1;
    public int startX = 0;
    public int endX = 0;
    public int startY = 0;
    public int endY = 0;
    public int mutation = 0;
    public int generation = 0;
    public char[][] crossover = new char[4][14];
    public char[][] crossover2 = new char[4][14];
    public String[] crossoverSolutions = new String[4];
    public double[] crossoverSolutionsOld = new double[4];
    public int[] crossoverfitnessValues = new int[4];
    public double newAVG = 0;
    public double oldAVG = 0;
    public boolean showTable = true;
    public boolean isMutate = false;
}
